
#include <cassert>
#include <cmath>
#include <memory>
#include <stdexcept>

#include <pacbio/consensus/ModelConfig.h>
#include <pacbio/consensus/Read.h>

#include "../ModelFactory.h"
#include "../Recursor.h"

namespace PacBio {
namespace Consensus {
namespace {

class SP1C1PwModel : public ModelConfig
{
    REGISTER_MODEL(SP1C1PwModel);

public:
    static std::set<std::string> Names() { return {"S/P1-C1", "S/P2-C2/prospective-compatible"}; }
    SP1C1PwModel(const SNR& snr);
    std::unique_ptr<AbstractRecursor> CreateRecursor(std::unique_ptr<AbstractTemplate>&& tpl,
                                                     const MappedRead& mr, double scoreDiff) const;
    std::vector<TemplatePosition> Populate(const std::string& tpl) const;
    double SubstitutionRate(uint8_t prev, uint8_t curr) const;

private:
    SNR snr_;
    double ctxTrans_[16][4];
};

REGISTER_MODEL_IMPL(SP1C1PwModel);

// TODO(lhepler) comments regarding the CRTP
class SP1C1PwRecursor : public Recursor<SP1C1PwRecursor>
{
public:
    SP1C1PwRecursor(std::unique_ptr<AbstractTemplate>&& tpl, const MappedRead& mr,
                    double scoreDiff);
    static inline std::vector<uint8_t> EncodeRead(const MappedRead& read);
    static inline double EmissionPr(MoveType move, uint8_t emission, uint8_t prev, uint8_t curr);
    virtual double UndoCounterWeights(size_t nEmissions) const;
};

double emissionPmf[3][16][12] = {
    {// matchPmf
        {   0.0489062503,  0.000889886245,  0.000153817916,   0.00016182064,    0.0653641646,   0.00111575945,  0.000930148728,  3.48720362e-05,      0.87737422,   0.00408643924,   0.00081561073,  0.000108185589},
        {  0.00386553619,    0.0115257555,  8.58614994e-05,  5.15690457e-05,    0.0153006867,     0.037129433,  0.000226910327,  0.000252568155,     0.020313623,     0.910571204,  0.000317056327,  0.000283771324},
        { 0.000319234757,  0.000108244006,    0.0171584188,   0.00259510092,   0.00194609369,  5.90375019e-05,     0.072394101,   0.00325794121,  0.000514331279,  0.000301591091,     0.885121796,    0.0161389701},
        { 0.000418159305,  0.000111549362,   0.00836721947,      0.01593622,  8.02834136e-05,  9.85620898e-05,    0.0349816616,    0.0460293324,  0.000317176775,  0.000435017645,    0.0774440069,     0.815718223},
        {   0.0203812059,  0.000859090879,  0.000506562484,  0.000184779863,    0.0585257097,  0.000984172135,   0.00115639836,  3.81496635e-05,     0.913505443,   0.00216181999,   0.00122498971,  0.000409723165},
        {     0.04390207,    0.0109072129,   0.00012368241,  8.55451022e-05,    0.0129089281,     0.031847383,  0.000157078209,  0.000127868467,    0.0167889248,     0.882998744,  4.72450974e-05,   3.3117581e-05},
        { 0.000309176164,  4.36842274e-05,   0.00714181483,   0.00105135123,  0.000534817073,  9.54612274e-05,    0.0333102303,   0.00169694494,  0.000539858697,  0.000497304403,       0.9423628,    0.0123593393},
        { 0.000259052015,  0.000170717224,    0.0104064759,    0.0164883226,  8.03247407e-05,  8.34505645e-05,    0.0322942318,    0.0475373216,  0.000343287489,  0.000696684994,    0.0775825264,     0.813973472},
        {  0.00979985405,  0.000443064629,  0.000139066901,  0.000131286036,    0.0325292546,  0.000513700107,  0.000641068177,  2.90068736e-05,     0.951027862,   0.00396290384,   0.00038296225,   0.00032709609},
        {  0.00208177493,   0.00590239745,  0.000173109487,  3.15049037e-05,   0.00738330434,    0.0195541128,  0.000222293239,  0.000148751948,    0.0124107572,     0.951495559,  0.000310724795,  0.000234963778},
        {   0.0373618939,  5.77816968e-05,   0.00648840467,   0.00112756131,  0.000104976151,  2.95036527e-05,    0.0261488791,   0.00134531356,  0.000516614359,  6.64401347e-05,     0.915219871,     0.011459811},
        { 0.000198025647,  3.39921429e-05,   0.00439634372,   0.00921840767,  0.000240694521,   9.0706252e-05,    0.0181063011,    0.0273783644,  0.000256744712,  0.000736125706,    0.0520186696,     0.887248373},
        {   0.0190598303,  0.000891090536,   0.00120010802,  0.000159879865,    0.0561078738,  0.000754583277,   0.00150466396,  4.33504802e-05,     0.912838686,   0.00558164145,   0.00151985326,  0.000245294416},
        {   0.0018351586,   0.00630519421,  0.000147204467,  0.000107018709,   0.00703231914,    0.0195216589,  0.000240901829,  0.000142490268,    0.0117318059,     0.952588802,  7.08542089e-05,  0.000203108964},
        { 0.000129661248,  3.84585981e-05,   0.00841495167,   0.00113344651,  0.000424726431,   4.6170915e-05,    0.0340844047,    0.0013017634,  0.000996513184,  0.000141079556,     0.940451679,     0.012775865},
        {   0.0290798421,  0.000698832582,    0.0069494164,   0.00746063409,   0.00324854222,   0.00101765219,      0.01712907,    0.0228473149,    0.0283732218,    0.0262790665,    0.0762559056,       0.7806085}},

    
    {// branchPmf
        {    0.348294504,   0.00042247624,   0.00042247624,   0.00042247624,     0.205521794,   0.00042247624,   0.00042247624,   0.00042247624,     0.440269035,   0.00042247624,   0.00042247624,   0.00042247624},
        {   0.0010550733,      0.11376992,    0.0010550733,    0.0010550733,    0.0010550733,    0.0900955464,    0.0010550733,    0.0010550733,    0.0010550733,     0.781363507,    0.0010550733,    0.0010550733},
        { 0.000278381881,  0.000278381881,     0.280038085,  0.000278381881,  0.000278381881,  0.000278381881,     0.163928048,  0.000278381881,  0.000278381881,  0.000278381881,     0.552136521,  0.000278381881},
        { 0.000738795758,  0.000738795758,  0.000738795758,     0.157533472,  0.000738795758,  0.000738795758,  0.000738795758,     0.109785137,  0.000738795758,  0.000738795758,  0.000738795758,     0.722338251},
        {    0.167594003,   0.00011812418,   0.00011812418,   0.00011812418,     0.132140951,   0.00011812418,   0.00011812418,   0.00011812418,     0.698611307,   0.00011812418,   0.00011812418,   0.00011812418},
        { 0.000198261232,    0.0530082923,    0.0001736893,    0.0001736893,  0.000173911454,    0.0456136682,    0.0001736893,    0.0001736893,  0.000188508128,     0.898906776,    0.0001736893,    0.0001736893},
        { 0.000146502433,  0.000146502433,     0.219608259,  0.000146502433,  0.000146502433,  0.000146502433,     0.140107086,  0.000146502433,  0.000146502433,  0.000146502433,     0.638233621,  0.000146502433},
        { 0.000722832823,  0.000722832823,  0.000722832823,     0.106869961,  0.000722832823,  0.000722832823,  0.000722832823,     0.115266447,  0.000722832823,  0.000722832823,  0.000722832823,     0.767743932},
        {    0.126213264,  0.000148424858,  0.000148424858,  0.000148424858,    0.0913247749,  0.000148424858,  0.000148424858,  0.000148424858,     0.780384013,  0.000148424858,  0.000148424858,  0.000148424858},
        { 0.000478894299,    0.0917603405,  0.000478894299,  0.000478894299,  0.000478894299,    0.0849062045,  0.000478894299,  0.000478894299,  0.000478894299,     0.816628935,  0.000478894299,  0.000478894299},
        { 0.000433148258,  0.000433084804,     0.406437659,  0.000433084804,  0.000536424311,  0.000433084804,     0.200212143,  0.000433084804,  0.000438661057,  0.000433084804,     0.387178031,  0.000433084804},
        { 0.000533656106,  0.000533656106,  0.000533656106,    0.0744344121,  0.000533656106,  0.000533656106,  0.000533656106,    0.0625131266,  0.000533656106,  0.000533656106,  0.000533656106,     0.855581276},
        {    0.132398382,  0.000165091304,  0.000165091304,  0.000165091304,     0.120892743,  0.000165091304,  0.000165091304,  0.000165091304,     0.744397596,  0.000165091304,  0.000165091304,  0.000165091304},
        { 0.000333980633,    0.0520902287,  0.000333980633,  0.000333980633,  0.000333980633,    0.0620982851,  0.000333980633,  0.000333980633,  0.000333980633,     0.881135757,  0.000333980633,  0.000333980633},
        {  0.00018230722,   0.00018230722,     0.207446253,   0.00018230722,   0.00018230722,   0.00018230722,     0.123866589,   0.00018230722,   0.00018230722,   0.00018230722,     0.666134857,   0.00018230722},
        { 0.000192486211,  0.000128785163,  0.000128785163,    0.0563225577,  0.000128829973,  0.000128785163,  0.000128785163,    0.0774092938,  0.000314675178,  0.000128785163,  0.000128785163,      0.86421552}},
    
    {// stickPmf
        {  0.00028011167,    0.0403496687,      0.36801106,    0.0501229101,   0.00028011167,    0.0181640563,     0.137754736,    0.0201312173,   0.00028011167,     0.107888075,     0.168367591,    0.0869697934},
            {    0.133377448,  0.000186612777,      0.30491876,    0.0397763184,    0.0639771679,  0.000186612777,      0.13896055,    0.0202771084,     0.113308678,  0.000186612777,     0.105722199,    0.0781888679},
            {     0.34658336,    0.0508812373,  0.000591128511,     0.132395882,    0.0682106991,    0.0158576874,  0.000591128511,    0.0729250146,    0.0576573776,    0.0765077702,  0.000591128511,     0.174251944},
            {    0.241315945,    0.0436519178,      0.24115413,   0.00024081778,    0.0868606287,    0.0187889061,     0.149016164,   0.00024081778,    0.0556593424,    0.0524075112,     0.109218913,   0.00024081778},
            { 0.000176425084,    0.0318178602,     0.365165468,    0.0509984416,  0.000176425084,   0.00822924184,     0.139414318,     0.019872265,  0.000176425084,     0.189242181,     0.129904767,    0.0639440565},
            {    0.114847718,  9.72475647e-05,     0.282189062,    0.0404318334,    0.0751511349,  8.45744579e-05,      0.17440311,    0.0165838083,     0.130750492,  8.65057753e-05,     0.120088652,    0.0448682077},
            {    0.286039632,     0.040284868,  0.000194698658,    0.0581382772,     0.133727683,     0.027327054,  0.000194698658,    0.0237083831,     0.144534312,     0.164359438,  0.000194698658,     0.120322764},
            {    0.210434729,     0.029831863,     0.184094159,  0.000263692828,    0.0924710366,     0.016451129,     0.112899133,  0.000263692828,    0.0847708692,     0.155357671,     0.111579867,  0.000263692828},
            { 0.000341622539,    0.0344083983,       0.3986661,    0.0535223944,  0.000341622539,    0.0121732801,      0.14342244,    0.0169582592,  0.000341622539,     0.119732178,      0.09882111,      0.11956286},
            {    0.112717611,  8.66531325e-05,     0.345936573,    0.0433281877,     0.060063282,  8.66531325e-05,     0.223819838,    0.0178923776,     0.042848506,  8.66531325e-05,    0.0950654019,    0.0576349977},
            {    0.323408851,    0.0572440739,   0.00151809703,    0.0776713892,        0.135856,    0.0246951276,  0.000493093616,    0.0204713324,     0.138549431,    0.0758886008,    0.0004647869,     0.141494675},
            {    0.287259702,    0.0450648704,     0.270675402,   0.00038477334,     0.101546805,    0.0109329603,     0.124861933,   0.00038477334,    0.0911166363,    0.0361890141,    0.0292744904,   0.00038477334},
            {  0.00033881597,    0.0355839389,     0.307186233,    0.0496656046,   0.00033881597,    0.0132841027,     0.132390455,    0.0208438675,   0.00033881597,    0.0821798249,     0.207266763,     0.148888683},
            {    0.141262569,  0.000160216276,     0.233976445,    0.0378708476,     0.051405576,  0.000160216276,     0.107807938,    0.0182114928,    0.0657814668,  0.000160216276,     0.122591048,     0.219810887},
            {    0.349652769,    0.0439652792,  0.000357655609,     0.076692397,     0.139000552,    0.0193010417,  0.000357655609,    0.0266918376,     0.115648896,    0.0538320305,  0.000357655609,     0.172353952},
            {    0.162522755,    0.0268394705,     0.211691349,  0.000199809774,    0.0742415659,    0.0100914344,     0.173766587,  0.000165391035,    0.0624585952,    0.0487875046,      0.22826421,  0.000169064125}}};

double transProbs[16][3][1] = {
    // Fit for context:  AA
    {
        { -3.56292010309222  },
        { -3.17009442074964  },
        { -2.52945758040502  }
    },
    // Fit for context:  AC
    {
        { -4.18397773776816  },
        { -2.51753481182522  },
        { -3.73382972801686  }
    },
    // Fit for context:  AG
    {
        { -2.78098208461006  },
        { -3.55935736572269  },
        { -2.76844633311983  }
    },
    // Fit for context:  AT
    {
        { -4.00612860339893  },
        { -2.95536230728211  },
        { -3.57352010333461  }
    },
    // Fit for context:  CA
    {
        { -2.25925198690869  },
        { -2.67798278626165  },
        { -2.83812852753993  }
    },
    // Fit for context:  CC
    {
        { -2.48677198835943  },
        { -1.75205286129138  },
        { -2.84801187888219  }
    },
    // Fit for context:  CG
    {
        { -2.54524191021617  },
        { -2.85311719973655  },
        { -3.40252463443916  }
    },
    // Fit for context:  CT
    {
        { -3.72673583034063  },
        { -2.76968822160547  },
        { -3.2983934418321  }
    },
    // Fit for context:  GA
    {
        { -2.32360003151613  },
        { -3.16798772292424  },
        { -3.52989036562557  }
    },
    // Fit for context:  GC
    {
        { -3.82046132465079  },
        { -2.16478246722578  },
        { -3.9469786346912  }
    },
    // Fit for context:  GG
    {
        { -3.38211273744613  },
        { -3.42738069791586  },
        { -2.61882019593604  }
    },
    // Fit for context:  GT
    {
        { -3.51029349229781  },
        { -3.22355541637544  },
        { -3.59212341850989  }
    },
    // Fit for context:  TA
    {
        { -2.1858511592608  },
        { -2.93046782722826  },
        { -2.94529904389669  }
    },
    // Fit for context:  TC
    {
        { -3.11949769431318  },
        { -2.43715292181974  },
        { -3.90494905770807  } 
    },
    // Fit for context:  TG
    { 
        { -2.69535137519398  },
        { -3.40148910263822  },
        { -3.33102852877081  } 
    },
    // Fit for context:  TT
    { 
        { -2.40964122006302  },
        { -2.62006787091387  },
        { -3.23155314114086  } 
    }

};

SP1C1PwModel::SP1C1PwModel(const SNR& snr) : snr_(snr)
{
    for (int ctx = 0; ctx < 16; ++ctx) {
        double sum = 1.0;
        ctxTrans_[ctx][0] = 1.0;
        for (size_t j = 0; j < 3; ++j) {
            double xb = transProbs[ctx][j][0] ;
            xb = std::exp(xb);
            ctxTrans_[ctx][j + 1] = xb;
            sum += xb;
        }
        for (size_t j = 0; j < 4; ++j)
            ctxTrans_[ctx][j] /= sum;
    }
}

std::unique_ptr<AbstractRecursor> SP1C1PwModel::CreateRecursor(
    std::unique_ptr<AbstractTemplate>&& tpl, const MappedRead& mr, double scoreDiff) const
{
    return std::unique_ptr<AbstractRecursor>(
        new SP1C1PwRecursor(std::forward<std::unique_ptr<AbstractTemplate>>(tpl), mr, scoreDiff));
}

std::vector<TemplatePosition> SP1C1PwModel::Populate(const std::string& tpl) const
{
    std::vector<TemplatePosition> result;

    if (tpl.empty()) return result;

    result.reserve(tpl.size());

    // Calculate probabilities in all 16 Contexts
    uint8_t prev = detail::TranslationTable[static_cast<uint8_t>(tpl[0])];
    if (prev > 3) throw std::invalid_argument("invalid character in template!");

    for (size_t i = 1; i < tpl.size(); ++i) {
        const uint8_t curr = detail::TranslationTable[static_cast<uint8_t>(tpl[i])];
        if (curr > 3) throw std::invalid_argument("invalid character in template!");
        const auto row = (prev << 2) | curr;
        const auto params = ctxTrans_[row];
        result.emplace_back(TemplatePosition{
            tpl[i - 1], prev,
            params[0],  // match
            params[1],  // branch
            params[2],  // stick
            params[3]   // deletion
        });
        prev = curr;
    }
    result.emplace_back(TemplatePosition{tpl.back(), prev, 1.0, 0.0, 0.0, 0.0});

    return result;
}

double SP1C1PwModel::SubstitutionRate(uint8_t prev, uint8_t curr) const
{
    const auto row = (prev << 2) | curr;
    double eps = 0.0;
    for (uint8_t pw = 0; pw < 3; ++pw)
        for (uint8_t bp = 0; bp < 4; ++bp)
            if (bp != curr)
                eps += emissionPmf[static_cast<uint8_t>(MoveType::MATCH)][row][(pw << 2) | bp];
    return eps / (3 * 4);
}

SP1C1PwRecursor::SP1C1PwRecursor(std::unique_ptr<AbstractTemplate>&& tpl, const MappedRead& mr,
                                 double scoreDiff)
    : Recursor<SP1C1PwRecursor>(std::forward<std::unique_ptr<AbstractTemplate>>(tpl), mr, scoreDiff)
{
}

std::vector<uint8_t> SP1C1PwRecursor::EncodeRead(const MappedRead& read)
{
    std::vector<uint8_t> result;

    for (size_t i = 0; i < read.Length(); ++i) {
        uint8_t pw = std::max(2, std::min(0, read.PulseWidth[i] - 1));
        uint8_t bp = detail::TranslationTable[static_cast<uint8_t>(read.Seq[i])];
        if (bp > 3) throw std::invalid_argument("invalid character in read!");
        uint8_t em = (pw << 2) | bp;
        if (em > 11) throw std::runtime_error("read encoding error!");
        result.emplace_back(em);
    }

    return result;
}

double SP1C1PwRecursor::EmissionPr(MoveType move, uint8_t emission, uint8_t prev, uint8_t curr)
{
    assert(move != MoveType::DELETION);
    const auto row = (prev << 2) | curr;
    return emissionPmf[static_cast<uint8_t>(move)][row][emission];
}

double SP1C1PwRecursor::UndoCounterWeights(const size_t nEmissions) const { return 0; }
}  // namespace anonymous
}  // namespace Consensus
}  // namespace PacBio
